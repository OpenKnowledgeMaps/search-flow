openapi: 3.0.0
info:
  title: OKMaps Parameterized Search and Visualisation Service
  description: |
    This is an entry point into the automatic pipeline that leads users directly to a visualisation based on either BASE or PubMed data. The entry point is a parameterized search/waiting page that accepts URL-encoded parameters. In this sense, it is functionally similar to a HTTP-GET interface.

    However, the service is not returning a raw data representation of a visualisation, but rather a web page that triggers the creation of the visualisation. Therefore, the service entry point does not conform to the strict definition of a HTTP-GET interface.
    
    A link representing a request to the entry point can be created manually by the Custom Services integrator, or automatically in the integration according to the service specifications outlined in the documentation (see below). When the user clicks on the link, a new tab is opened showing a waiting page while the visual interface is being computed. Once the computation has successfully finished, the user is forwarded to the visual interface in the same tab. Visualisation data is persisted on our servers.
  version: dev

servers:
  - url: http://localhost
    description: Internal server for testing

paths:
  /search?type=get&service=base:
    get:
      summary: |
        Configure searches and create visualisations (Data source: BASE)
      description: |
        This is an entry point into the automatic pipeline that leads users directly to a visualisation based on BASE data. 
      parameters:
        - in: query
          name: repo
          required: false
          description: |
            Specify a content provider available within BASE. This parameter is a shorthand for a single content provider that the search will be restricted to. The shorthand for a content provider can be identified as follows:

            1. Search for the content provider within the list of content providers on the [BASE website](https://www.base-search.net/about/en/about_sources_date.php).
            2. Once you have identified the content provider you want to use, click on the question mark next to the name of the content provider.
            3. Look up the dccoll parameter as indicated in the screenshot, in this case `ftubbiepub`. This is the shorthand to be used here.
            <br><br>
            <img src="../BASE_coll_param.png" />
          schema:
            type: string
        - in: query
          name: vis_type
          required: false
          description: |
            Choose a visualisation type. There are two types available: 1) Knowledge Map = `overview` and 2) Streamgraph = `timeline`. 
            
            A Knowledge Map presents you with a topical overview for your search query based on the 100 most relevant documents matching your query. 
            
            A Streamgraph presents you with an overview of the main keywords over time based on up to 1000 documents matching your query. Please note the streamgraph is a prototype and may be rough around the edges.
            
            If the parameter is not provided, it defaults to `overview` (=Knowledge Map).
          schema:
            type: string
            enum: [overview, timeline]
        - in: query
          name: q
          required: false
          description: |
            Enter your search query, e.g. `digital education`.

            We apply the verbatim search mode to improve visualisation quality. It is possible to use advanced query syntax as described in the [BASE Interface Guide](https://www.base-search.net/about/download/base_interface.pdf), Appendix 1.5 Query Syntax. Boolean operators such as `open AND science`, exclusion such as `science -research` and phrase search such as `"digital education"` are possible.
            
            This parameter can be used on its own or in conjunction with q_advanced. If you decide to leave it empty please make sure you fill in `q_advanced` instead otherwise a working link can’t be generated. **Warning: Do not** use an advanced query designed for the _q_advanced_ field in the _q_ field, this can lead to an error during the request.

          schema:
            type : string
          example: digital education
          allowReserved: true
        - in: query
          name: q_advanced
          required: false
          description: |
            **This feature is a prototype! Some queries may not work as expected.**
            
            Enter your advanced search query, e.g. `dctitle:"open science"`. 

            This parameter can either be used instead of `q` or in conjunction with `q`. If q_advanced is used in conjunction with q, e.g. `q=ethics` and `q_advanced=dctitle:"open science"`, the resulting knowledge map will contain documents that have “open science” in their title and the term ethics anywhere in their metadata.

            It is possible to search directly in individual fields as described in the [BASE Interface Guide](https://www.base-search.net/about/download/base_interface.pdf), Appendix 1.2 Fields. For example:

            * `dcorcid:0000-0002-1894-5040` This will create a knowledge map of documents created by the author with the specified ORCiD. Please be aware however that we are dependent on the metadata coverage in BASE. Currently, only a subset of the outputs linked to an ORCiD profile can be retrieved. BASE is actively working on improving the coverage.

            * `dcrelation:"https://zenodo.org/communities/biosyslit"` This will create a knowledge map of documents with a specific Zenodo community mentioned in the relations field.

            * `dccreator:"Lastname Firstname"` This will create a knowledge map of documents by a specified author. Please note that in contrast to an ORCiD, author names may not be unique.

            * `dccoverage:"Rocky Mountains"` This will create a knowledge map of documents containing research about the Rocky Mountains.

            Experimental use of advanced queries involving Boolean operators such as `AND`, `OR`, and `NOT` (described in the [BASE Interface Guide](https://www.base-search.net/about/download/base_interface.pdf), Appendix 1.5 Query Syntax) is possible. However, this functionality is still under development on our side, and may not always work as expected.

          schema:
            type : string
          allowReserved: true
        - in: query
          name: sorting
          required: false
          description: | 
            Choose a sorting value for your search. 

            Sorting here means the way the documents are prioritised by the aggregator before the visualisation is created.

            To determine the `most-relevant` documents, we use the relevance ranking provided by BASE. BASE mainly uses text similarity between your query and the article metadata to determine the relevance ranking. Please [consult this page](https://lucene.apache.org/core/6_4_2/core/org/apache/lucene/search/package-summary.html#scoring) for more information.

            The `most-recent` option ranks documents according to their recency, with the most recent documents appearing first.

            If the parameter is not provided, it defaults to `most-relevant`.

          schema:
            type : string
            enum: [most-relevant, most-recent]
            default: most-relevant
        - in: query
          name: document_types[]
          required: false
          description: |
            Specify the BASE-internal document type(s) that your search will be restricted to e.g. `121`, `14` or `15`. More information on available document types can be found in the [BASE Interface Guide](https://www.base-search.net/about/download/base_interface.pdf), Appendix 3. Document types.

            To add an additional document type code, click on "Add item" below the input field.

            If the parameter is not provided, it defaults to `121` (Journal/newspaper article).
          schema:
            type: array
            items:
              oneOf:
                - type: string
                - type: integer
            default: [121]
          style: form
          explode: true
        - in: query
          name: lang_id[]
          required: false
          description: |
            Specify language ID(s) that that your search will be restricted to, e.g. `spa` (=Spanish).

            Valid parameters are the three-letter codes of [ISO 639-2/B](https://en.wikipedia.org/wiki/List_of_ISO_639-2_codes).

            To add an additional language ID code, click on "Add string item" below the input field.

            If the parameter is not provided or if you enter a wrong parameter, it defaults to `all-lang`, which means that no language filter will be applied to the search results.
          schema:
            type: array
            items:
              oneOf:
                - type: string
            default: [all-lang]
          style: form
          explode: true
        - in: query
          name: from
          required: false
          description: |
            Specify a start date for your search in the format `YYYY-MM-DD`. If the parameter is not provided, it defaults to `1665-01-01`. **Please note** this is the earliest date available for journal articles, other document types may have even earlier publication dates.
          schema:
            type: string
            format: date
            example: "1665-01-01"
        - in: query
          name: to
          required: false
          description: Specify an end date for your search in the format `YYYY-MM-DD`. If the parameter is not provided, it defaults to the current day.
          schema:
            type: string
            format: date
        - in: query
          name: coll
          required: false
          description: |
            Specify a collection available within BASE that your search will be restricted to. 

            This parameter denotes a collection of content providers belonging to a geographic region, e.g. `at` or `de`. For countries, please use a lower case two-letter code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2), for example `at` or `de`. For continents, please use a lower case three letter code according to the BASE Interface guide, e.g. `caf` for Africa, `ceu` for Europe or `cna` for North America.

            If the parameter is not provided, it defaults to _worldwide_.
            
            **Warning:** The coll parameter can **not** be used in conjunction with the _repo_ parameter.  More information on available collections can be found in the [BASE Interface Guide](https://www.base-search.net/about/download/base_interface.pdf), Appendix 1. Collection-related queries.
          schema:
            type: string
        - in: query
          name: min_descsize
          required: false
          description: |
            Specify the minimum abstract length in characters. Documents with an abstract length below that value will not be included in the search results.

            To activate the filter, the value has to be larger than 0. We recommend this setting if your repository contains mostly documents with an abstract. Our internal research has shown that a value of ≥300 increases the quality of visualisations for most repositories. Values larger than 1.000 are less likely to produce results for the majority of repositories.

            To deactivate the filter, the value has to be `0`. We recommend this setting if your repository contains mostly documents without an abstract. **Please note that low metadata quality may significantly reduce the quality of your visualisations.**

            If the parameter is not provided, it defaults to a value of `300`.
          schema:
            type: integer
            example: 300
        - in: query
          name: custom_clustering
          required: false
          description: |
            to be added
          schema:
            type: string
        - in: query
          name: custom_title
          required: false
          description: |
            Specify a custom title for your visualisation. The custom title will be displayed instead of the default title generated from the query string. We recommend using a custom title for individual knowledge maps that make use of long complex queries or q_advanced.

            **Example**

            Before `cancer or (cancer and immunotherapy) or (cancer and cell biology) or cancer care`:
            <br>
            <img src="../custom_title_before.png" />

            After, with custom_title `cross-cutting research on cancer`:
            <br>
            <img src="../custom_title_after.png" />

            **Please note**, titles that are longer than 77 characters will be abbreviated, however the full custom title will be displayed in the “More information” message and in the tooltip.
          schema:
            type: string
      responses:
        '200':    # status code
          description: Redirecting to the waiting page

  /search?type=get&service=pubmed:
    get:
      summary: |
        Configure searches and create visualisations (Data source: PubMed)
      description: |
        This is an entry point into the automatic pipeline that leads users directly to a visualisation based on PubMed data. 
      parameters:
        - in: query
          name: q
          required: true
          description: |
            Enter your search query, e.g. `“climate change”`.
            
            For PubMed, the query is relayed as-is, which means advanced PubMed syntax can be applied.
            
            If the parameter is empty the link can’t be generated. 
          schema:
            type : string
          example: climate change
          allowReserved: true
        - in: query
          name: from
          required: false
          description: |
            Specify a start date for your search in the format `YYYY-MM-DD`. If the parameter is not provided, it defaults to `1809-01-01`.
          schema:
            type: string
            format: date
            example: "1809-01-01"
        - in: query
          name: to
          required: false
          description: Select an end date for your search in the format `YYYY-MM-DD`. If the parameter is not provided, it defaults to the current day.
          schema:
            type: string
            format: date
        - in: query
          name: sorting
          required: false
          description: | 
            Choose a sorting value for your search. 

            Sorting here means the way the documents are prioritised by the aggregator before the visualisation is created.

            To determine the `most-relevant` documents, we use the relevance ranking provided by PubMed. PubMed mainly uses text similarity between your query and the article metadata to determine the relevance ranking. Please [consult this page](https://pubmed.ncbi.nlm.nih.gov/help/#best-match-algorithm) for more information.

            The `most-recent` option ranks documents according to their recency, with the most recent documents appearing first.

            If the parameter is not provided, it defaults to `most-relevant`.
          schema:
            type : string
            enum: [most-relevant, most-recent]
            default: most-relevant
        - in: query
          name: article_types[]
          required: false
          description: |
            Specify the article type(s) that your search will be restricted to, e.g. `journal article` or `clinical trial`. More information on available article types can be found in the [PubMed documentation](https://pubmed.ncbi.nlm.nih.gov/help/#publication-types). 
            To add an additional article type, click on "Add item" below the input field. 
            If the parameter is not specified, it defaults to all article types.
          schema:
            type: array
            items:
              type: string
            default: []
          style: form
          explode: true
      responses:
        '200':    # status code
          description: Redirecting to the waiting page

  /search?type=get&service=openaire:
    get:
      summary: |
        Configure searches and create visualisations for research projects (Data source: OpenAIRE) 
      description: |
        This is an entry point into the automatic pipeline that leads users directly to a visualisation based on OpenAIRE data.
      parameters:
        - in: query
          name: project_id
          required: true
          description: |
            Enter a valid project ID, e.g. `643410` (=OpenAIRE2020).

            **Please note** that OpenAIRE also lists projects which may not have any resources (publications or datasets) associated with it. In this case the search will fail and display an error.
          schema:
            type: string
        - in: query
          name: funder
          required: true
          description: |
            Enter the funder ID related to the project you entered above, e.g. `EC` (=European Commission).

            **Please note** that the funder ID and the project ID have to match, otherwise a visualisation can’t be created.

            Possible funders include (sorted by alphabetical order of the funder name):

            | funder | funder name |
            | ------ | ----- |
            |`AKA`| Academy of Finland |
            |`ASAP`| Aligning Science Across Parkinson’s |
            |`ARC`| Australian Research Council |
            |`FWF`| Austrian Science Fund |
            |`CHISTERA`| CHIST-ERA |
            |`CIHR`| Canadian Institutes of Health Research |
            |`HRZZ`| Croatian Science Foundation |
            |`EC`| European Commission |
            |`EEA`| European Environment Agency |
            |`ANR`| French National Research Agency |
            |`FCT`| Fundação para a Ciência e a Tecnologia, I.P. |
            |`MESTD`| Ministry of Education, Science and Technological Development of Republic of Serbia |
            |`MZOS`| Ministry of Science, Education and Sports of the Republic of Croatia |
            |`NHMRC`| National Health and Medical Research Council |
            |`NIH`| National Institutes of Health |
            |`NSF`| National Science Foundation |
            |`NSERC`| Natural Sciences and Engineering Research Council of Canada |
            |`NWO`| Netherlands Organisation for Scientific Research |
            |`SFI`| Science Foundation Ireland |
            |`SSHRC`| Social Sciences and Humanities Research Council |
            |`SNSF`| Swiss National Science Foundation |
            |`TARA`| Tara Expeditions Foundation |
            |`TUBITAK`| Türkiye Bilimsel ve Teknolojik Araştırma Kurumu |
            |`UKRI`| UK Research and Innovation |
            |`WT`| Wellcome Trust |
          
            **Please note** that this list may not be complete. More information on funder IDs can be found in the [OpenAIRE API documentation](https://graph.openaire.eu/develop/api.html).

          schema:
            type: string
      responses:
        '200':    # status code
          description: Redirecting to the waiting page

